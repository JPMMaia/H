module Binary_expressions;

export function integer_operations(
    first_signed_integer: Int32,
    second_signed_integer: Int32,
    first_unsigned_integer: Uint32,
    second_unsigned_integer: Uint32
) -> ()
{
    var add = first_signed_integer + second_signed_integer;
    var subtract = first_signed_integer - second_signed_integer;
    var multiply = first_signed_integer * second_signed_integer;
    var signed_divide = first_signed_integer / second_signed_integer;
    var unsigned_divide = first_unsigned_integer / second_unsigned_integer;
    var signed_modulus = first_signed_integer % second_signed_integer;
    var unsigned_modulus = first_unsigned_integer % second_unsigned_integer;

    var equal = first_signed_integer == second_signed_integer;
    var not_equal = first_signed_integer != second_signed_integer;
    
    var signed_less_than = first_signed_integer < second_signed_integer;
    var unsigned_less_than = first_unsigned_integer < second_unsigned_integer;
    var signed_less_than_or_equal_to = first_signed_integer <= second_signed_integer;
    var unsigned_less_than_or_equal_to = first_unsigned_integer <= second_unsigned_integer;
    var signed_greater_than = first_signed_integer > second_signed_integer;
    var unsigned_greater_than = first_unsigned_integer > second_unsigned_integer;
    var signed_greater_than_or_equal_to = first_signed_integer >= second_signed_integer;
    var unsigned_greater_than_or_equal_to = first_unsigned_integer >= second_unsigned_integer;
    
    var bitwise_and = first_signed_integer & second_signed_integer;
    var bitwise_or = first_signed_integer | second_signed_integer;
    var bitwise_xor = first_signed_integer ^ second_signed_integer;
    var bit_shift_left = first_signed_integer << second_signed_integer;
    var signed_bit_shift_right = first_signed_integer >> second_signed_integer;
    var unsigned_bit_shift_right = first_unsigned_integer >> second_unsigned_integer;
}

export function boolean_operations(
    first_boolean: Bool,
    second_boolean: Bool
) -> ()
{
    var equal = first_boolean == second_boolean;
    var not_equal = first_boolean != second_boolean;
    var logical_and = first_boolean && second_boolean;
    var logical_or = first_boolean || second_boolean;
}

export function float32_operations(
    first_float: Float32,
    second_float: Float32
) -> ()
{
    var add = first_float + second_float;
    var subtract = first_float - second_float;
    var multiply = first_float * second_float;
    var divide = first_float / second_float;
    var modulus = first_float % second_float;

    var equal = first_float == second_float;
    var not_equal = first_float != second_float;
    
    var less_than = first_float < second_float;
    var less_than_or_equal_to = first_float <= second_float;
    var greater_than = first_float > second_float;
    var greater_than_or_equal_to = first_float >= second_float;
}
