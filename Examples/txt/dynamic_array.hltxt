module dynamic_array;

export struct Allocator
{
    allocate: function<(size_in_bytes: Uint64, alignment_in_bytes: Uint64) -> (pointer: *mutable Byte)> = null;
    deallocate: function<(pointer: *mutable Byte) -> ()> = null;
}

export type_constructor Dynamic_array(element_type: Type)
{
    return struct
    {
        data: *mutable element_type = null;
        length: Uint64 = 0u64;
        capacity: Uint64 = 0u64;
        allocator: Allocator = {};
    };
}

export function_constructor create(element_type: Type)
{
    return function (allocator: Allocator) -> (instance: Dynamic_array<element_type>)
        precondition "allocator.allocate != null" { allocator.allocate != null }
        precondition "allocator.deallocate != null" { allocator.deallocate != null }
    {
        return {
            data: null,
            length: 0u64,
            capacity: 0u64,
            allocator: allocator
        };
    };
}

export function_constructor push_back(element_type: Type)
{
    return function (instance: *mutable Dynamic_array<element_type>, element: element_type) -> ()
        precondition "instance != null" { instance != null }
    {
        if instance->length == instance->capacity
        {
            var new_capacity = 2u64 * (instance->capacity + 1u64);
            
            var allocation_size_in_bytes = new_capacity * @size_of(element_type);
            var allocation = instance->allocator.allocate(allocation_size_in_bytes, @alignment_of(element_type));
            if allocation == null
            {
                abort("Allocation failed!");
            }

            instance->data = allocation as *mutable element_type;
            instance->capacity = new_capacity;
        }

        var index = instance->length;
        instance->data[index] = element;
        instance->length += 1u64;
    };
}

export function_constructor get(element_type: Type)
{
    return function (instance: *mutable Dynamic_array<element_type>, index: Uint64) -> (result: element_type)
        precondition "instance != null" { instance != null }
        precondition "index < instance->length" { index < instance->length } 
    {
        return instance->data[index];
    };
}
