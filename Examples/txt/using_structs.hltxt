module Structs;

export struct My_struct
{
    a: Int32 = 1;
    b: Int32 = 2;
}

export struct My_struct_2
{
    a: My_struct = {};
    
    b: My_struct = {
        a: 2
    };

    c: My_struct = {
        a: 3,
        b: 4
    };
}

export enum My_enum
{
    A = 3,
    B = 4,
}

export union My_Union
{
    a: My_struct;
    b: My_struct_2;
}

export struct My_struct_3
{
    my_enum: My_enum = My_enum.B;
    my_union: My_Union = {
        a: {}
    };
}

export function use_structs(my_struct: My_struct) -> ()
{
    var a = my_struct.a;
    
    var instance_0: My_struct = {};
    
    var instance_1: My_struct = {
        b: 3
    };

    var instance_2: My_struct_2 = {};

    var instance_3: My_struct_2 = explicit{
        a: {},
        b: {},
        c: explicit{
            a: 0,
            b: 1
        }
    };

    var nested_b_a = instance_3.b.a;

    mutable instance_4: My_struct = {};
    instance_4 = explicit{
        a: 10,
        b: 11
    };
    instance_4.a = 0;

    pass_struct({});
    var instance_5 = return_struct();

    var instance_6: My_struct_3 = {};
}

function pass_struct(my_struct: My_struct) -> ()
{
}

function return_struct() -> (my_struct: My_struct)
{
    return {};
}
