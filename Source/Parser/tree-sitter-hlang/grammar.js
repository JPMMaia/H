/**
 * @file Hlang grammar for tree-sitter
 * @author Jo√£o Maia <jpmmaia@gmail.com>
 * @license MIT
 */

/// <reference types="tree-sitter-cli/dsl" />
// @ts-check

module.exports = grammar({
  name: "hlang",

  conflicts: $ => [
    [$.Expression_binary, $.Expression_instance_call],
    [$.Expression_binary, $.Expression_instance_call, $.Expression_unary],
    [$.Generic_expression, $.Expression_instance_call_parameter]
  ],

  rules: {
    Module: $ => seq($.Module_head, repeat($.Declaration)),
    Module_head: $ => seq($.Module_declaration, repeat($.Import)),
    Module_declaration: $ => seq(optional($.Comment), "module", $.Module_name, ";"),
    Module_name: $ => $.Identifier_with_dots,
    Import: $ => seq("import", $.Import_name, "as", $.Import_alias, ";"),
    Import_name: $ => $.Identifier_with_dots,
    Import_alias: $ => $.Identifier,
    Declaration: $ => seq(optional($.Comment), optional("export"), choice(
      $.Alias,
      $.Enum,
      $.Global_variable,
      $.Struct,
      $.Union,
      $.Function,
      $.Type_constructor,
      $.Function_constructor
    )),
    Type: $ => choice(
      $.Type_name,
      $.Module_type,
      $.Pointer_type,
      $.Constant_array_type,
      $.Function_pointer_type,
      $.Type_instance_type
    ),
    Type_name: $ => prec(1, $.Identifier),
    Module_type: $ => seq($.Module_type_module_name, ".", $.Module_type_type_name),
    Module_type_module_name: $ => prec(2, $.Identifier),
    Module_type_type_name: $ => $.Identifier,
    Pointer_type: $ => prec(13, seq("*", optional("mutable"), $.Type)),
    Constant_array_type: $ => seq("Constant_array", "<", $.Type, ",", $.Constant_array_length, ">"),
    Constant_array_length: $ => $.Number,
    Function_pointer_type: $ => seq("function", "<", $.Function_pointer_type_input_parameters, "->", $.Function_pointer_type_output_parameters, ">"),
    Function_pointer_type_input_parameters: $ => seq("(", optional(seq($.Function_parameter, repeat(seq(",", $.Function_parameter)))), ")"),
    Function_pointer_type_output_parameters: $ => seq("(", optional(seq($.Function_parameter, repeat(seq(",", $.Function_parameter)))), ")"),
    Type_instance_type: $ => prec(2, seq($.Type, $.Type_instance_type_parameters)),
    Type_instance_type_parameters: $ => seq("<", optional(seq($.Expression_instance_call_parameter, repeat(seq(",", $.Expression_instance_call_parameter)))), ">"),
    Alias: $ => seq("using", $.Alias_name, "=", $.Alias_type, ";"),
    Alias_name: $ => $.Identifier,
    Alias_type: $ => $.Type,
    Enum: $ => seq("enum", $.Enum_name, $.Enum_values),
    Enum_name: $ => $.Identifier,
    Enum_values: $ => seq("{", repeat($.Enum_value), "}"),
    Enum_value: $ => seq(optional($.Comment), $.Enum_value_name, optional(seq("=", $.Generic_expression)), ","),
    Enum_value_name: $ => $.Identifier,
    Global_variable: $ => seq($.Global_variable_mutability, $.Global_variable_name, optional(seq(":", $.Type)), "=", $.Generic_expression_or_instantiate, ";"),
    Global_variable_name: $ => $.Identifier,
    Global_variable_mutability: $ => choice("var", "mutable"),
    Struct: $ => seq("struct", $.Struct_name, $.Struct_members),
    Struct_name: $ => $.Identifier,
    Struct_members: $ => seq("{", repeat($.Struct_member), "}"),
    Struct_member: $ => seq(optional($.Comment), $.Struct_member_name, ":", $.Struct_member_type, "=", $.Generic_expression_or_instantiate, ";"),
    Struct_member_name: $ => $.Identifier,
    Struct_member_type: $ => $.Type,
    Union: $ => seq("union", $.Union_name, $.Union_members),
    Union_name: $ => $.Identifier,
    Union_members: $ => seq("{", repeat($.Union_member), "}"),
    Union_member: $ => seq(optional($.Comment), $.Union_member_name, ":", $.Union_member_type, ";"),
    Union_member_name: $ => $.Identifier,
    Union_member_type: $ => $.Type,
    Function: $ => seq($.Function_declaration, choice($.Function_definition, ";")),
    Function_declaration: $ => seq("function", $.Function_name, $.Function_input_parameters, "->", $.Function_output_parameters, repeat($.Function_precondition), repeat($.Function_postcondition)),
    Function_name: $ => $.Identifier,
    Function_input_parameters: $ => seq("(", optional(seq($.Function_parameter, repeat(seq(",", $.Function_parameter)))), ")"),
    Function_output_parameters: $ => seq("(", optional(seq($.Function_parameter, repeat(seq(",", $.Function_parameter)))), ")"),
    Function_parameter: $ => choice(
      seq($.Function_parameter_name, ":", $.Function_parameter_type),
      "..."
    ),
    Function_parameter_name: $ => $.Identifier,
    Function_parameter_type: $ => $.Type,
    Function_precondition: $ => seq("precondition", $.Function_precondition_name, "{", $.Generic_expression, "}"),
    Function_precondition_name: $ => $.String,
    Function_postcondition: $ => seq("postcondition", $.Function_postcondition_name, "{", $.Generic_expression, "}"),
    Function_postcondition_name: $ => $.String,
    Function_definition: $ => $.Block,
    Type_constructor: $ => seq("type_constructor", $.Type_constructor_name, $.Type_constructor_parameters, $.Block),
    Type_constructor_name: $ => $.Identifier,
    Type_constructor_parameters: $ => seq("(", optional(seq($.Function_parameter, repeat(seq(",", $.Function_parameter)))), ")"),
    Function_constructor: $ => seq("function_constructor", $.Function_constructor_name, $.Function_constructor_parameters, $.Block),
    Function_constructor_name: $ => $.Identifier,
    Function_constructor_parameters: $ => seq("(", optional(seq($.Function_parameter, repeat(seq(",", $.Function_parameter)))), ")"),
    Block: $ => seq("{", repeat($.Statement), "}"),
    Statement: $ => choice(
      seq($.Expression_assignment, ";"),
      $.Expression_block,
      seq($.Expression_break, ";"),
      seq($.Expression_call, ";"),
      $.Expression_comment,
      seq($.Expression_continue, ";"),
      seq($.Expression_defer, ";"),
      $.Expression_for_loop,
      $.Expression_if,
      seq($.Expression_return, ";"),
      $.Expression_switch,
      seq($.Expression_variable_declaration, ";"),
      seq($.Expression_variable_declaration_with_type, ";"),
      $.Expression_while_loop
    ),
    Generic_expression: $ => choice(
      $.Expression_access,
      $.Expression_access_array,
      $.Expression_binary,
      $.Expression_cast,
      $.Expression_call,
      $.Expression_constant,
      $.Expression_create_array,
      $.Expression_dereference_and_access,
      $.Expression_function,
      $.Expression_instance_call,
      $.Expression_null_pointer,
      $.Expression_parenthesis,
      $.Expression_struct,
      $.Expression_ternary_condition,
      $.Expression_unary,
      $.Expression_union,
      $.Expression_variable,
    ),
    Generic_expression_or_instantiate: $ => choice(
      $.Expression_instantiate,
      $.Generic_expression
    ),
    Expression_access: $ => prec.left(13, seq($.Generic_expression, ".", $.Expression_access_member_name)),
    Expression_access_member_name: $ => $.Identifier,
    Expression_access_array: $ => prec.left(13, seq($.Generic_expression, "[", $.Generic_expression, "]")),
    Expression_assignment: $ => seq($.Generic_expression, $.Expression_assignment_symbol, $.Generic_expression_or_instantiate),
    Expression_assignment_symbol: $ => choice("=", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=", "<<=", ">>="),
    Expression_binary: $ => choice(
      prec.left(1, seq($.Generic_expression, "||", $.Generic_expression)),
      prec.left(2, seq($.Generic_expression, "&&", $.Generic_expression)),
      prec.left(3, seq($.Generic_expression, "|", $.Generic_expression)),
      prec.left(4, seq($.Generic_expression, "^", $.Generic_expression)),
      prec.left(5, seq($.Generic_expression, "&", $.Generic_expression)),
      prec.left(5, seq($.Generic_expression, "has", $.Generic_expression)),
      prec.left(6, seq($.Generic_expression, "==", $.Generic_expression)),
      prec.left(6, seq($.Generic_expression, "!=", $.Generic_expression)),
      prec.left(7, seq($.Generic_expression, "<", $.Generic_expression)),
      prec.left(7, seq($.Generic_expression, "<=", $.Generic_expression)),
      prec.left(7, seq($.Generic_expression, ">", $.Generic_expression)),
      prec.left(7, seq($.Generic_expression, ">=", $.Generic_expression)),
      prec.left(8, seq($.Generic_expression, "<<", $.Generic_expression)),
      prec.left(8, seq($.Generic_expression, ">>", $.Generic_expression)),
      prec.left(9, seq($.Generic_expression, "+", $.Generic_expression)),
      prec.left(9, seq($.Generic_expression, "-", $.Generic_expression)),
      prec.left(10, seq($.Generic_expression, "*", $.Generic_expression)),
      prec.left(10, seq($.Generic_expression, "/", $.Generic_expression)),
      prec.left(10, seq($.Generic_expression, "%", $.Generic_expression)),
    ),
    Expression_block: $ => seq("{", repeat($.Statement), "}"),
    Expression_break: $ => seq("break", optional($.Expression_break_loop_count)),
    Expression_break_loop_count: $ => $.Number,
    Expression_call: $ => prec.left(13, seq($.Generic_expression, $.Expression_call_arguments)),
    Expression_call_arguments: $ => seq("(", optional(seq($.Generic_expression_or_instantiate, repeat(seq(",", $.Generic_expression_or_instantiate)))), ")"),
    Expression_cast: $ => prec(11, seq($.Generic_expression, "as", $.Expression_type)),
    Expression_comment: $ => $.Comment,
    Expression_constant: $ => choice($.Boolean, $.Number, $.String),
    Expression_continue: $ => "continue",
    Expression_create_array: $ => seq("[", optional(seq($.Generic_expression_or_instantiate, repeat(seq(",", $.Generic_expression_or_instantiate)))), "]"),
    Expression_defer: $ => seq("defer", $.Generic_expression),
    Expression_dereference_and_access: $ => prec.left(13, seq($.Generic_expression, "->", $.Identifier)),
    Expression_for_loop: $ => seq($.Expression_for_loop_head, $.Expression_for_loop_statements),
    Expression_for_loop_head: $ => seq("for", $.Expression_for_loop_variable, "in", $.Expression_for_loop_range_begin, "to", $.Expression_for_loop_range_end, optional($.Expression_for_loop_step), optional($.Expression_for_loop_reverse)),
    Expression_for_loop_variable: $ => $.Identifier,
    Expression_for_loop_range_begin: $ => $.Expression_for_loop_number_expression,
    Expression_for_loop_range_end: $ => $.Expression_for_loop_number_expression,
    Expression_for_loop_step: $ => seq("step_by", $.Expression_for_loop_number_expression),
    Expression_for_loop_reverse: $ => "reverse",
    Expression_for_loop_number_expression: $ => choice(
      $.Expression_access,
      $.Expression_call,
      $.Expression_constant,
      $.Expression_unary,
      $.Expression_variable
    ),
    Expression_for_loop_statements: $ => seq("{", repeat($.Statement), "}"),
    Expression_function: $ => seq("function", $.Function_input_parameters, "->", $.Function_output_parameters, repeat($.Function_precondition), repeat($.Function_postcondition), $.Block),
    Expression_instance_call: $ => prec.left(13, seq($.Generic_expression, seq("<", optional(seq($.Expression_instance_call_parameter, repeat(seq(",", $.Expression_instance_call_parameter)))), ">"))),
    Expression_instance_call_parameter: $ => choice(
      $.Expression_constant,
      $.Expression_type
    ),
    Expression_instantiate: $ => seq(optional("explicit"), $.Expression_instantiate_members),
    Expression_instantiate_members: $ => seq("{", optional(seq($.Expression_instantiate_member, repeat(seq(",", $.Expression_instantiate_member)))), "}"),
    Expression_instantiate_member: $ => seq($.Expression_instantiate_member_name, ":", $.Generic_expression_or_instantiate),
    Expression_instantiate_member_name: $ => $.Identifier,
    Expression_if: $ => seq("if", $.Generic_expression, $.Expression_if_statements, optional($.Expression_if_else)),
    Expression_if_else: $ => choice(
      seq("else", $.Expression_if),
      seq("else", $.Expression_if_statements)
    ),
    Expression_if_statements: $ => seq("{", repeat($.Statement), "}"),
    Expression_null_pointer: $ => "null",
    Expression_parenthesis: $ => seq("(", $.Generic_expression, ")"),
    Expression_return: $ => choice(
      "return",
      seq("return", $.Generic_expression_or_instantiate)
    ),
    Expression_struct: $ => seq("struct", $.Struct_members),
    Expression_switch: $ => seq("switch", $.Generic_expression, $.Expression_switch_cases),
    Expression_switch_cases: $ => seq("{", repeat($.Expression_switch_case), "}"),
    Expression_switch_case: $ => choice(
      seq("case", $.Expression_switch_case_value, ":", repeat($.Statement)),
      seq("default", ":", repeat($.Statement))
    ),
    Expression_switch_case_value: $ => choice(
      $.Expression_access,
      $.Expression_constant,
      $.Expression_variable
    ),
    Expression_type: $ => $.Type,
    Expression_ternary_condition: $ => prec.right(0, seq($.Generic_expression, "?", $.Generic_expression, ":", $.Generic_expression)),
    Expression_unary: $ => prec.right(12, seq($.Expression_unary_symbol, $.Generic_expression)),
    Expression_unary_symbol: $ => choice("!", "~", "-", "&", "*"),
    Expression_union: $ => seq("union", $.Union_members),
    Expression_variable: $ => $.Variable_name,
    Expression_variable_declaration: $ => seq($.Expression_variable_mutability, $.Variable_name, "=", $.Generic_expression),
    Expression_variable_declaration_with_type: $ => seq($.Expression_variable_mutability, $.Variable_name, ":", $.Expression_variable_declaration_type, "=", $.Generic_expression_or_instantiate),
    Expression_variable_declaration_type: $ => $.Type,
    Expression_variable_mutability: $ => choice("var", "mutable"),
    Expression_while_loop: $ => seq("while", $.Generic_expression, $.Expression_while_loop_statements),
    Expression_while_loop_statements: $ => seq("{",  repeat($.Statement), "}"),
    Variable_name: $ => $.Identifier,
    Identifier: $ => /[a-zA-Z_][a-zA-Z_0-9]*/,
    Identifier_with_dots: $ => seq($.Identifier, repeat(seq(".", $.Identifier))),
    Boolean: $ => choice("true", "false"),
    Number: $ => /\d+([.]\d+)?[a-z0-9]*/,
    String: $ => /".*"[a-z0-9]*/,
    Comment: $ => prec.left(0, repeat1(token(seq("//", /.*/)))),
  }
});
