{
    "enums": [
        {
            "name": "Fundamental_type",
            "values": [
                "Bool",
                "Byte",
                "Float16",
                "Float32",
                "Float64",
                "String",
                "Any_type",
                "C_bool",
                "C_char",
                "C_schar",
                "C_uchar",
                "C_short",
                "C_ushort",
                "C_int",
                "C_uint",
                "C_long",
                "C_ulong",
                "C_longlong",
                "C_ulonglong"
            ]
        },
        {
            "name": "Access_type",
            "values": [
                "Read",
                "Write",
                "Read_write"
            ]
        },
        {
            "name": "Binary_operation",
            "values": [
                "Add",
                "Subtract",
                "Multiply",
                "Divide",
                "Modulus",
                "Equal",
                "Not_equal",
                "Less_than",
                "Less_than_or_equal_to",
                "Greater_than",
                "Greater_than_or_equal_to",
                "Logical_and",
                "Logical_or",
                "Bitwise_and",
                "Bitwise_or",
                "Bitwise_xor",
                "Bit_shift_left",
                "Bit_shift_right",
                "Has"
            ]
        },
        {
            "name": "Cast_type",
            "values": [
                "Numeric",
                "BitCast"
            ]
        },
        {
            "name": "Instantiate_struct_type",
            "values": [
                "Default",
                "Explicit"
            ]
        },
        {
            "name": "Unary_operation",
            "values": [
                "Not",
                "Bitwise_not",
                "Minus",
                "Pre_increment",
                "Post_increment",
                "Pre_decrement",
                "Post_decrement",
                "Indirection",
                "Address_of"
            ]
        },
        {
            "name": "Linkage",
            "values": [
                "External",
                "Private"
            ]
        }
    ],
    "structs": [
        {
            "name": "Integer_type",
            "members": [
                {
                    "type": {
                        "name": "std::uint32_t"
                    },
                    "name": "number_of_bits"
                },
                {
                    "type": {
                        "name": "bool"
                    },
                    "name": "is_signed"
                }
            ]
        },
        {
            "name": "Builtin_type_reference",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "value"
                }
            ]
        },
        {
            "name": "Function_type",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::vector<Type_reference>"
                    },
                    "name": "input_parameter_types"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Type_reference>"
                    },
                    "name": "output_parameter_types"
                },
                {
                    "type": {
                        "name": "bool"
                    },
                    "name": "is_variadic"
                }
            ]
        },
        {
            "name": "Pointer_type",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::vector<Type_reference>"
                    },
                    "name": "element_type"
                },
                {
                    "type": {
                        "name": "bool"
                    },
                    "name": "is_mutable"
                }
            ]
        },
        {
            "name": "Module_reference",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                }
            ]
        },
        {
            "name": "Constant_array_type",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::vector<Type_reference>"
                    },
                    "name": "value_type"
                },
                {
                    "type": {
                        "name": "std::uint64_t"
                    },
                    "name": "size"
                }
            ]
        },
        {
            "name": "Custom_type_reference",
            "members": [
                {
                    "type": {
                        "name": "Module_reference"
                    },
                    "name": "module_reference"
                },
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                }
            ]
        },
        {
            "name": "Type_reference",
            "members": [
                {
                    "type": {
                        "name": "std::variant<Builtin_type_reference,Constant_array_type,Custom_type_reference,Fundamental_type,Function_type,Integer_type,Pointer_type>"
                    },
                    "name": "data"
                }
            ]
        },
        {
            "name": "Statement",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Expression>"
                    },
                    "name": "expressions"
                }
            ]
        },
        {
            "name": "Alias_type_declaration",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Type_reference>"
                    },
                    "name": "type"
                }
            ]
        },
        {
            "name": "Enum_value",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "std::optional<Statement>"
                    },
                    "name": "value"
                }
            ]
        },
        {
            "name": "Enum_declaration",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Enum_value>"
                    },
                    "name": "values"
                }
            ]
        },
        {
            "name": "Struct_declaration",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Type_reference>"
                    },
                    "name": "member_types"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<std::pmr::string>"
                    },
                    "name": "member_names"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Statement>"
                    },
                    "name": "member_default_values"
                },
                {
                    "type": {
                        "name": "bool"
                    },
                    "name": "is_packed"
                },
                {
                    "type": {
                        "name": "bool"
                    },
                    "name": "is_literal"
                }
            ]
        },
        {
            "name": "Variable_expression",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "Access_type"
                    },
                    "name": "access_type"
                }
            ]
        },
        {
            "name": "Expression_index",
            "members": [
                {
                    "type": {
                        "name": "std::uint64_t"
                    },
                    "name": "expression_index"
                }
            ]
        },
        {
            "name": "Access_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "expression"
                },
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "member_name"
                },
                {
                    "type": {
                        "name": "Access_type"
                    },
                    "name": "access_type"
                }
            ]
        },
        {
            "name": "Assignment_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "left_hand_side"
                },
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "right_hand_side"
                },
                {
                    "type": {
                        "name": "std::optional<Binary_operation>"
                    },
                    "name": "additional_operation"
                }
            ]
        },
        {
            "name": "Binary_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "left_hand_side"
                },
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "right_hand_side"
                },
                {
                    "type": {
                        "name": "Binary_operation"
                    },
                    "name": "operation"
                }
            ]
        },
        {
            "name": "Block_expression",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::vector<Statement>"
                    },
                    "name": "statements"
                }
            ]
        },
        {
            "name": "Break_expression",
            "members": [
                {
                    "type": {
                        "name": "std::uint64_t"
                    },
                    "name": "loop_count"
                }
            ]
        },
        {
            "name": "Call_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "expression"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Expression_index>"
                    },
                    "name": "arguments"
                }
            ]
        },
        {
            "name": "Cast_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "source"
                },
                {
                    "type": {
                        "name": "Type_reference"
                    },
                    "name": "destination_type"
                },
                {
                    "type": {
                        "name": "Cast_type"
                    },
                    "name": "cast_type"
                }
            ]
        },
        {
            "name": "Constant_expression",
            "members": [
                {
                    "type": {
                        "name": "Type_reference"
                    },
                    "name": "type"
                },
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "data"
                }
            ]
        },
        {
            "name": "Continue_expression",
            "members": []
        },
        {
            "name": "For_loop_expression",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "variable_name"
                },
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "range_begin"
                },
                {
                    "type": {
                        "name": "Statement"
                    },
                    "name": "range_end"
                },
                {
                    "type": {
                        "name": "Binary_operation"
                    },
                    "name": "range_comparison_operation"
                },
                {
                    "type": {
                        "name": "std::optional<Expression_index>"
                    },
                    "name": "step_by"
                },
                {
                    "type": {
                        "name": "Statement"
                    },
                    "name": "then_statement"
                }
            ]
        },
        {
            "name": "Condition_statement_pair",
            "members": [
                {
                    "type": {
                        "name": "std::optional<Statement>"
                    },
                    "name": "condition"
                },
                {
                    "type": {
                        "name": "Statement"
                    },
                    "name": "statement"
                }
            ]
        },
        {
            "name": "If_expression",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::vector<Condition_statement_pair>"
                    },
                    "name": "series"
                }
            ]
        },
        {
            "name": "Instantiate_struct_member_value_pair",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "member_name"
                },
                {
                    "type": {
                        "name": "Statement"
                    },
                    "name": "value"
                }
            ]
        },
        {
            "name": "Instantiate_struct_expression",
            "members": [
                {
                    "type": {
                        "name": "Instantiate_struct_type"
                    },
                    "name": "type"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Instantiate_struct_member_value_pair>"
                    },
                    "name": "members"
                }
            ]
        },
        {
            "name": "Invalid_expression",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "value"
                }
            ]
        },
        {
            "name": "Null_pointer_expression",
            "members": []
        },
        {
            "name": "Parenthesis_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "expression"
                }
            ]
        },
        {
            "name": "Return_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "expression"
                }
            ]
        },
        {
            "name": "Switch_case_expression_pair",
            "members": [
                {
                    "type": {
                        "name": "std::optional<Expression_index>"
                    },
                    "name": "case_value"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Statement>"
                    },
                    "name": "statements"
                }
            ]
        },
        {
            "name": "Switch_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "value"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Switch_case_expression_pair>"
                    },
                    "name": "cases"
                }
            ]
        },
        {
            "name": "Ternary_condition_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "condition"
                },
                {
                    "type": {
                        "name": "Statement"
                    },
                    "name": "then_statement"
                },
                {
                    "type": {
                        "name": "Statement"
                    },
                    "name": "else_statement"
                }
            ]
        },
        {
            "name": "Unary_expression",
            "members": [
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "expression"
                },
                {
                    "type": {
                        "name": "Unary_operation"
                    },
                    "name": "operation"
                }
            ]
        },
        {
            "name": "Variable_declaration_expression",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "bool"
                    },
                    "name": "is_mutable"
                },
                {
                    "type": {
                        "name": "Expression_index"
                    },
                    "name": "right_hand_side"
                }
            ]
        },
        {
            "name": "Variable_declaration_with_type_expression",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "bool"
                    },
                    "name": "is_mutable"
                },
                {
                    "type": {
                        "name": "Type_reference"
                    },
                    "name": "type"
                },
                {
                    "type": {
                        "name": "Statement"
                    },
                    "name": "right_hand_side"
                }
            ]
        },
        {
            "name": "While_loop_expression",
            "members": [
                {
                    "type": {
                        "name": "Statement"
                    },
                    "name": "condition"
                },
                {
                    "type": {
                        "name": "Statement"
                    },
                    "name": "then_statement"
                }
            ]
        },
        {
            "name": "Expression",
            "members": [
                {
                    "type": {
                        "name": "std::variant<Access_expression,Assignment_expression,Binary_expression,Block_expression,Break_expression,Call_expression,Cast_expression,Constant_expression,Continue_expression,For_loop_expression,If_expression,Instantiate_struct_expression,Invalid_expression,Null_pointer_expression,Parenthesis_expression,Return_expression,Switch_expression,Ternary_condition_expression,Unary_expression,Variable_declaration_expression,Variable_declaration_with_type_expression,Variable_expression,While_loop_expression>"
                    },
                    "name": "data"
                }
            ]
        },
        {
            "name": "Function_declaration",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "Function_type"
                    },
                    "name": "type"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<std::pmr::string>"
                    },
                    "name": "input_parameter_names"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<std::pmr::string>"
                    },
                    "name": "output_parameter_names"
                },
                {
                    "type": {
                        "name": "Linkage"
                    },
                    "name": "linkage"
                }
            ]
        },
        {
            "name": "Function_definition",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Statement>"
                    },
                    "name": "statements"
                }
            ]
        },
        {
            "name": "Language_version",
            "members": [
                {
                    "type": {
                        "name": "std::uint32_t"
                    },
                    "name": "major"
                },
                {
                    "type": {
                        "name": "std::uint32_t"
                    },
                    "name": "minor"
                },
                {
                    "type": {
                        "name": "std::uint32_t"
                    },
                    "name": "patch"
                }
            ]
        },
        {
            "name": "Import_module_with_alias",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "module_name"
                },
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "alias"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<std::pmr::string>"
                    },
                    "name": "usages"
                }
            ]
        },
        {
            "name": "Module_dependencies",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::vector<Import_module_with_alias>"
                    },
                    "name": "alias_imports"
                }
            ]
        },
        {
            "name": "Module_declarations",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::vector<Alias_type_declaration>"
                    },
                    "name": "alias_type_declarations"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Enum_declaration>"
                    },
                    "name": "enum_declarations"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Struct_declaration>"
                    },
                    "name": "struct_declarations"
                },
                {
                    "type": {
                        "name": "std::pmr::vector<Function_declaration>"
                    },
                    "name": "function_declarations"
                }
            ]
        },
        {
            "name": "Module_definitions",
            "members": [
                {
                    "type": {
                        "name": "std::pmr::vector<Function_definition>"
                    },
                    "name": "function_definitions"
                }
            ]
        },
        {
            "name": "Module",
            "members": [
                {
                    "type": {
                        "name": "Language_version"
                    },
                    "name": "language_version"
                },
                {
                    "type": {
                        "name": "std::pmr::string"
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "name": "Module_dependencies"
                    },
                    "name": "dependencies"
                },
                {
                    "type": {
                        "name": "Module_declarations"
                    },
                    "name": "export_declarations"
                },
                {
                    "type": {
                        "name": "Module_declarations"
                    },
                    "name": "internal_declarations"
                },
                {
                    "type": {
                        "name": "Module_definitions"
                    },
                    "name": "definitions"
                }
            ]
        }
    ]
}