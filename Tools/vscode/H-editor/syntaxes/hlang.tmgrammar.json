{
    "scopeName": "source.hlang",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#types"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.hlang",
                    "begin": "//",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.hlang"
                        }
                    },
                    "end": "$"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.hlang",
                    "match": "\\b(break|case|continue|default|else|explicit|export|for|function|if|import|in|module|mutable|return|reverse|step_by|switch|to|using|var|while)\\b"
                },
                {
                    "name": "keyword.operator.hlang",
                    "match": "\\b(has|as)\\b"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.hlang",
                    "match": "\\b(0[xX][0-9a-fA-F]+|\\d+(\\.\\d+)?([eE][+-]?\\d+)?)\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.hlang",
                    "match": "(\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=|=)"
                },
                {
                    "name": "keyword.operator.arithmetic.hlang",
                    "match": "(\\+|\\-|\\*|\\/|%)"
                },
                {
                    "name": "keyword.operator.logical.hlang",
                    "match": "(\\&\\&|\\|\\||!|&|\\|)"
                },
                {
                    "name": "keyword.operator.comparison.hlang",
                    "match": "(==|!=|<|>|<=|>=)"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.hlang",
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.hlang"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.hlang"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.hlang",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.hlang",
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.hlang"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.hlang"
                        }
                    },
                    "patterns": [
                        {
                            "name": "constant.character.escape.hlang",
                            "match": "\\\\."
                        }
                    ]
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "storage.type.hlang",
                    "match": "\\b(Int8|Int16|Int32|Int64|Uint8|Uint16|Uint32|Uint64|Float16|Float32|Float64|enum|struct|union)\\b"
                }
            ]
        }
    }
}